mu[nonzero,] <- rmNorm(length(nonzero), sample_avg_Theta, sample_Sigma)
return(mu)
}
#' @param K Number of clusters (positive integer).
#' @param omega Sample covariance matrix of observed data of dimension of q x q.
#'
#' @return A q x q x K array of \eqn{\Sigma} drawn from its conditional posterior distribution.
#'
#' @details The conditional posterior distribution of \eqn{\Sigma} is given by:
#' ```
#' \eqn{\Sigma_k | A - \{ \Sigma_1,...,\Sigma_K \} \sim InvWish(\Omega_k + 1[z_i=k] (\theta_i - \mu_k)(\theta_i - \mu_k)', N_k + v_k)}.
#' ```
#' Hence `Sigma` is sampled from the Inverse-Wishart distribution given all other parameters.
update_Sigma <- function(z, Theta, mu, q, K, omega) {
N_k <- freq_table(z, K)
v_k <- q + 2 # such that a priori E[Sigma_k] = var(Y)
# list of scale matrix for the Inverse-Wishart distribution
l <- lapply(1:K, function(k) {
if (N_k[k] > 0) {
Theta_mu <- Theta[z==k,] - mu[rep(k, N_k[k]),]
# special case where N_k = 1 and must use `tcrossprod` instead of `crossprod`
if (N_k[k] == 1) {cp <- tcrossprod(Theta_mu)}
else {cp <- crossprod(Theta_mu)}
}
else {cp <- 0}
return(cp + omega)
})
riwish(K, array(unlist(l), dim = c(q,q,K)), N_k + v_k)
}
#' Random sampling from the Dirichlet distribution.
#'
#' @param n Number of random draws.
#' @param alpha Weight parameter: a vector of nonnegative entries.
#' @return A matrix of size `n x length(alpha)` of which each row is a random draw.
rdirichlet <- function(n, alpha) {
K <- length(alpha) # number of categories
X <- matrix(rgamma(n*K, shape = alpha), K, n)
drop(t(sweep(X, 2, colSums(X), "/")))
}
#' @param z Cluster membership indicator vector of length N.
#' @param K Number of clusters (positive integer).
#'
#' @return A vector of length K of \eqn{\rho} drawn from its conditional posterior distribution.
#'
#' @details The conditional posterior distribution of \eqn{\rho} is given by:
#' ```
#' \eqn{\rho | A - \{ \rho \} \sim Dirichlet(\alpha)},    \eqn{\alpha = (N_1 + 1 ,..., N_K + 1)}.
#' ```
#' Hence `rho` is sampled from the Dirichlet distribution given all other parameters.
update_rho <- function(z, K) {
N_k <- freq_table(z, K)
alpha <- N_k + 1
rdirichlet(1, alpha)
}
#' Sample from a categorical distribution.
#'
#' Performs one draw from a categorical distribution (i.e., a multinomial distribution with size `n = 1`) for each of multiple probability vectors.
#'
#' @param prob An `n_cat x n_prob` matrix of probability vectors, each of which is a column of `prob`.  The entries of `prob` must be nonnegative, but are internally normalized such that each column sums to one.
#' @return A vector of length `n_prob` of integers between 1 and `n_cat` indicating the category draw for each column of `prob`.
rcategorical <- function(prob) {
if(any(prob < 0)) stop("prob must contain only nonnegative entries.")
cprob <- apply(prob, 2, cumsum)
u <- runif(ncol(prob)) * cprob[nrow(prob),]
apply(sweep(cprob, 2, u) >= 0, 2, which.max)
}
#' @param K Number of clusters (positive integer).
#'
#' @return A list consisting of a vector of length N for \eqn{z}, and a N x K matrix for \eqn{lambda} (see details).
#'
#' @details The conditional posterior distribution of \eqn{z} is given by:
#' ```
#' \eqn{\kappa_{ik} = log \rho_k + log \phi(\theta_i | \mu_k, \Sigma_k) + CONST},
#' \eqn{z_i | A - \{ z \} \sim Multinomial(K, \lambda_i)},    \eqn{\lambda_{ik} = exp(\kappa_{ik}) / \sum^K_{m=1} exp(\kappa_{im}))}.
#' ```
#' Hence, `z` is sampled from the Multinomial distribution given all other parameters.
update_z <- function(Sigma, Theta, mu, rho, N, q, K) {
exp_kappa <- sapply(1:K, function(k) {
inS <- solveV(Sigma[,,k])
Theta_mu <- Theta - mu[rep(k, N),]
rho[k] * exp(-0.5*diag(Theta_mu %*% inS %*% t(Theta_mu)))
})
lambda <- exp_kappa / rowSums(exp_kappa)
new_z <- rcategorical(t(lambda))
return(list(updated_z = new_z, lambda = lambda))
}
require(mniw)
require(Matrix)
N <- 100
q <- 15
K <- 4
z <- sample(1:K, N, TRUE)
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
V <- replicate(N, expr = {rwish(1, diag(q), q+1)})
Theta <- rmNorm(N, mu[z,], Sigma[,,z])
y <- rmNorm(N, Theta, V)
Var_y <- cov(y)
v_k <- q+2
N_k <- freq_table(z, K)
rho <- update_rho(z, K)
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
# log likelihood function
ll <- function(y, Theta, V, Sigma, mu, z, rho, N, q, K, v_k, Var_y) {
N_k <- freq_table(z, K)
prior <- -0.5 * sum(sapply(1:K, function(k) {
S <- Sigma[,,k]
(v_k + q + 1) * log(det(S)) + sum(diag(solveV(S) %*% Var_y))
}))
first <- sum(sapply(1:N, function(i) {(y - Theta)[i,] %*% solveV(V[,,i]) %*% (y - Theta)[i,]}))
second <- sum(sapply(1:K, function(k) {
Theta_mu <- Theta[z==k,] - mu[rep(k, N_k[k]),]
S <- Sigma[,,k]
sum(diag(tcrossprod(Theta_mu %*% solveV(S), Theta_mu)) + log(det(S)))
}))
third <- sum(log(rho) * N_k)
prior + -0.5*(first + second) + third
}
testsize <- 10
testTheta <- replicate(testsize, update_Theta(y, V, z, mu, Sigma, N))
G <- lapply(1:N, function(i) {Sigma[,,z[i]] %*% solveV(V[,,i] + Sigma[,,z[i]])})
mu_Theta <- t(sapply(1:N, function(i) {t(G[[i]] %*% (y[i,] - mu[z[i],])) + mu[z[i],]}))
Sigma_Theta <- array(unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]})), dim = c(q,q,N))
test1 <- sapply(1:testsize, function(i) {
sum(dmNorm(testTheta[,,i], mu = mu_Theta, Sigma = Sigma_Theta, log = TRUE))
})
test2 <- sapply(1:testsize, function(i) {
Theta_i <- testTheta[,,i]
ll(y, Theta_i, V, Sigma, mu, z, rho, N, q, K, v_k, Var_y)
})
test1 - test2
testsize <- 10
testmu <- replicate(testsize, update_mu(z, mu, Theta, Sigma, N, q, K))
N_k <- freq_table(z, K)
sample_avg_Theta <- t(sapply(1:K, function(k) {colMeans(Theta[z==k,])}))
sample_Sigma <- array(unlist(lapply(1:K, function(k) {Sigma[,,k] / sum(z==k)})), dim = c(q,q,K))
test1 <- sapply(1:testsize, function(i) {
nonzero <- which(N_k > 0)
sum(dmNorm(testmu[nonzero,,i],
mu = sample_avg_Theta[nonzero,],
Sigma = sample_Sigma[,,nonzero], log = TRUE))
})
test2 <- sapply(1:testsize, function(i) {
mu_i <- testmu[,,i]
ll(y, Theta, V, Sigma, mu_i, z, rho, N, q, K, v_k, Var_y)
})
test1 - test2
testsize <- 10
testSigma <- replicate(testsize, update_Sigma(z, Theta, mu, q, K, Var_y))
mean_Sigma <- lapply(1:K, function(k) {crossprod(Theta[z==k,] - mu[rep(k, N_k[k]),]) + Var_y})
test1 <- sapply(1:testsize, function(i) {
sum(sapply(1:K, function(k) {
diwish(testSigma[,,k,i], mean_Sigma[[k]], N_k[k] + v_k, log = TRUE)
}))
})
test2 <- sapply(1:testsize, function(i) {
Sigma_i <- testSigma[,,,i]
ll(y, Theta, V, Sigma_i, mu, z, rho, N, q, K, v_k, Var_y)
})
test1 - test2
testsize <- 10
testrho <- replicate(testsize, update_rho(z, K))
#' Density of the Dirichlet distribution.
#'
#' @param x Observation vector of nonnegative entries which sum to one.
#' @param alpha Weight parameter: a vector of nonnegative entries the same length as `x`.
#' @param log Logical; whether to evaluate the density on the log scale.
#'
#' @return The density or log-density evaluated at the inputs (scalar).
ddirichlet <- function(x, alpha, log = FALSE) {
ld <- sum(lgamma(alpha)) - lgamma(sum(alpha))
ld <- ld + sum((alpha-1) * log(x))
if(!log) ld <- exp(ld)
ld
}
test1 <- sapply(1:testsize, function(i) {
sum(ddirichlet(testrho[,i], N_k + 1, log = TRUE))
})
test2 <- sapply(1:testsize, function(i) {
rho_i <- testrho[,i]
ll(y, Theta, V, Sigma, mu, z, rho_i, N, q, K, v_k, Var_y)
})
test1 - test2
testsize <- 10
testz <- replicate(testsize, update_z(Sigma, Theta, mu, rho, N, q, K)$updated_z)
inSigma <- lapply(1:K, function(k) {solveV(Sigma[,,k])})
Theta_mu <- lapply(1:K, function(k) {Theta - mu[rep(k, N),]})
exp_kappa <- sapply(1:K, function(k) {rho[k] * exp(-0.5*diag(Theta_mu[[k]] %*% inSigma[[k]] %*% t(Theta_mu[[k]])))})
lambda <- exp_kappa / rowSums(exp_kappa)
test1 <- sapply(1:testsize, function(i) {
sum(sapply(1:N, function(j) {
log(dmultinom(as.numeric(1:K == testz[j,i]), prob = lambda[j,]))
}))
})
test2 <- sapply(1:testsize, function(i) {
z_i <- testz[,i]
ll(y, Theta, V, Sigma, mu, z_i, rho, N, q, K, v_k, Var_y)
})
test1 - test2
N_k
#' @param Theta Prior unobserved data matrix of dimension N by q
#' @param mu Prior cluster means matrix of dimension K by q
#' @param rho Prior Gaussian Mixture model coefficients vector of length K
#' @param N Number of observations
#' @param q Size of \eqn{\theta_{i}}
#' @param K Number of clusters
#'
#' @return A list of two element. The first is a vector of length N. The second is a N by K matrix.
#'
#' @keywords internal
update_z <- function(Sigma, Theta, mu, rho, N, q, K) {
inSigma <- lapply(1:K, function(k) {solveV(Sigma[,,k])})
Theta_mu <- lapply(1:K, function(k) {Theta - mu[rep(k, N),]})
exp_kappa <- sapply(1:K, function(k) {rho[k] * exp(-0.5*diag(Theta_mu[[k]] %*% inSigma[[k]] %*% t(Theta_mu[[k]])))})
lambda <- exp_kappa / rowSums(exp_kappa)
new_z <- sapply(1:N, function(i) {which(rmultinom(1, 1, lambda[i,]) == 1)})
return(list(updated_z = new_z, Lambda = lambda))
}
testsize <- 10
testz <- replicate(testsize, update_z(Sigma, Theta, mu, rho, N, q, K)$updated_z)
inSigma <- lapply(1:K, function(k) {solveV(Sigma[,,k])})
Theta_mu <- lapply(1:K, function(k) {Theta - mu[rep(k, N),]})
exp_kappa <- sapply(1:K, function(k) {rho[k] * exp(-0.5*diag(Theta_mu[[k]] %*% inSigma[[k]] %*% t(Theta_mu[[k]])))})
lambda <- exp_kappa / rowSums(exp_kappa)
test1 <- sapply(1:testsize, function(i) {
sum(sapply(1:N, function(j) {
log(dmultinom(as.numeric(1:K == testz[j,i]), prob = lambda[j,]))
}))
})
test2 <- sapply(1:testsize, function(i) {
z_i <- testz[,i]
ll(y, Theta, V, Sigma, mu, z_i, rho, N, q, K, v_k, Var_y)
})
test1 - test2
library(mbc)
devtoos
devtools::document()
devtools::check()
??kmeans
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(mbc)
library(mbc)
devtools::document()
devtools::check()
devtools::document()
library(mbc)
testthat::test_package('mbc',reporter = 'progress')
devtools::install()
testthat::test_package('mbc',reporter = 'progress')
replicate(3, update_Theta(y, V, z, mu, Sigma, N))
?replicate
library(mbc)
devtools::document()
devtools::document()
devtools::document()
library(mbc)
devtools::document()
?replicate
devtools::document()
K =3
q = 2
replicate(K, diag(q))
class(replicate(K, diag(q)))
?test_package
testthat::test_package('mbc')
library(mbc)
library(mbc)
N <- 100
q <- 5
K <- 4
true_z <- sample(1:K, N, TRUE)
true_mu <- matrix(rnorm(q*K, 0, 5), ncol = q)
#' true_Sigma <- replicate(K, expr = {mniw::rwish(1, dia
true_Sigma <- replicate(K, expr = {mniw::rwish(1, diag(q)*runif(1, 0.01, 0.1), q+1)})
true_Theta <- mniw::rmNorm(N, true_mu[true_z,], true_Sigma[,,true_z])
V <- replicate(N, expr = {mniw::rwish(1, diag(q)*0.05, q+1)})
y <- mniw::rmNorm(N, true_Theta, V)
v_k <- q + 2
Var_y <- cov(y)
params <- init_params(y, K, N, type = "kmeans")
debug(init_params)
init_params(y, K, N, type = "kmeans")
z0
Theta
mu
diag(3)
q
replicate(K,diag(q))
replicate(K,diag(q))
debug(init_params)
init_params(y, K, N,type = "kmeans")
type
N_k
N_k
K
q
q
y
dim(y)
library(mbc)
debug(init_params)
init_params(y, K, N,type = "kmeans")
library(mbc)
init_params(y, N,type = "kmeans")
library(mbc)
N <- 100
q <- 5
K <- 4
true_z <- sample(1:K, N, TRUE)
true_mu <- matrix(rnorm(q*K, 0, 5), ncol = q)
true_Sigma <- replicate(K, expr = {mniw::rwish(1, diag(q)*runif(1, 0.01, 0.1), q+1)})
true_Theta <- mniw::rmNorm(N, true_mu[true_z,], true_Sigma[,,true_z])
V <- replicate(N, expr = {mniw::rwish(1, diag(q)*0.05, q+1)})
y <- mniw::rmNorm(N, true_Theta, V)
v_k <- q + 2
init_params(y, K, type = "kmeans")
debug(init_params)
init_params(y, K, type = "kmeans")
devtools::document()
devtools::document()
library(mbc)
N <- sample(100:500, 1)
q <- sample(2:10, 1)
K <- sample(2:10, 1)
testsize <- sample(5:10, 1)
z <- sample(1:K, N, TRUE)
z[z==1] <- 2
z[1] <- 1
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
V <- replicate(N, expr = {rwish(1, diag(q), q+1)})
Theta <- rmNorm(N, mu[z,], Sigma[,,z])
y <- rmNorm(N, Theta, V)
Var_y <- cov(y)
v_k <- q+2
N_k <- freq_table(z, K)
rho <- update_rho(z, K)
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
library(mbc)
N <- sample(100:500, 1)
q <- sample(2:10, 1)
K <- sample(2:10, 1)
testsize <- sample(5:10, 1)
z <- sample(1:K, N, TRUE)
z[z==1] <- 2
z[1] <- 1
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
V <- replicate(N, expr = {rwish(1, diag(q), q+1)})
Theta <- rmNorm(N, mu[z,], Sigma[,,z])
y <- rmNorm(N, Theta, V)
Var_y <- cov(y)
v_k <- q+2
N_k <- freq_table(z, K)
rho <- update_rho(z, K)
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
library(mbc)
devtools::install()
N <- sample(100:500, 1)
q <- sample(2:10, 1)
K <- sample(2:10, 1)
testsize <- sample(5:10, 1)
z <- sample(1:K, N, TRUE)
z[z==1] <- 2
z[1] <- 1
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {mniw::rwish(1, diag(q), q+1)})
V <- replicate(N, expr = {mniw::rwish(1, diag(q), q+1)})
Theta <- mniw::rmNorm(N, mu[z,], Sigma[,,z])
y <- mniw::rmNorm(N, Theta, V)
Var_y <- cov(y)
v_k <- q+2
N_k <- freq_table(z, K)
rho <- update_rho(z, K)
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
N <- sample(100:500, 1)
q <- sample(2:10, 1)
K <- sample(2:10, 1)
testsize <- sample(5:10, 1)
z <- sample(1:K, N, TRUE)
z[z==1] <- 2
z[1] <- 1
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {mniw::rwish(1, diag(q), q+1)})
V <- replicate(N, expr = {mniw::rwish(1, diag(q), q+1)})
Theta <- mniw::rmNorm(N, mu[z,], Sigma[,,z])
y <- mniw::rmNorm(N, Theta, V)
Var_y <- cov(y)
v_k <- q+2
N_k <- freq_table(z, K)
rho <- update_rho(z, K)
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {mniw::rwish(1, diag(q), q+1)})
test_Theta <- replicate(testsize, update_Theta(y, V, z, mu, Sigma, N))
Theta_params <- update_Theta(y, V, z, mu, Sigma, N, pars = TRUE)
debug(update_Theta)
Theta_params <- update_Theta(y, V, z, mu, Sigma, N, pars = TRUE)
debug(update_Theta)
Theta_params <- update_Theta(y, V, z, mu, Sigma, N, pars = TRUE)
G
mean_Theta
debug(update_Theta)
Theta_params <- update_Theta(y, V, z, mu, Sigma, N, pars = TRUE)
class(mean_Theta)
class(G)
length(G)
N
G[[2]] %*% V[, , 2]
lapply(1:N, function(i) {
G[[i]] %*% V[, , i]
})
lst <- lapply(1:N, function(i) {
G[[i]] %*% V[, , i]
})
class(lst)
lst <- unlist(lapply(1:N, function(i) {
G[[i]] %*% V[, , i]
}))
class(lst)
lst <- array(unlist(lapply(1:N, function(i) {
G[[i]] %*% V[, , i]
})))
class(lst)
lst
library(mbc)
debug(update_Theta)
Theta_params <- update_Theta(y, V, z, mu, Sigma, N, pars = TRUE)
array(unlist(lapply(1:N, function(i) {
G[[i]] %*% V[, , i]
}))
debug(update_Theta)
array(unlist(lapply(1:N, function(i) {
G[[i]] %*% V[, , i]
})))
debug(update_Theta)
Theta_params <- update_Theta(y, V, z, mu, Sigma, N, pars = TRUE)
array(unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]})))
array(unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]})), dim(q,q,N))
library(mbc)
library(mbc)
?array
?unlist
?list
N <- sample(100:500, 1)
q <- sample(2:10, 1)
K <- sample(2:10, 1)
testsize <- sample(5:10, 1)
z <- sample(1:K, N, TRUE)
z[z==1] <- 2
z[1] <- 1
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
V <- replicate(N, expr = {rwish(1, diag(q), q+1)})
Theta <- rmNorm(N, mu[z,], Sigma[,,z])
y <- rmNorm(N, Theta, V)
Var_y <- cov(y)
v_k <- q+2
N_k <- freq_table(z, K)
rho <- update_rho(z, K)
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {rwish(1, diag(q), q+1)})
N <- sample(100:500, 1)
q <- sample(2:10, 1)
K <- sample(2:10, 1)
testsize <- sample(5:10, 1)
z <- sample(1:K, N, TRUE)
z[z==1] <- 2
z[1] <- 1
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {mniw::rwish(1, diag(q), q+1)})
V <- replicate(N, expr = {mniw::rwish(1, diag(q), q+1)})
Theta <- mniw::rmNorm(N, mu[z,], Sigma[,,z])
y <- mniw::rmNorm(N, Theta, V)
Var_y <- cov(y)
v_k <- q+2
N_k <- freq_table(z, K)
rho <- update_rho(z, K)
mu <- matrix(rnorm(q*K), ncol = q)
Sigma <- replicate(K, expr = {mniw::rwish(1, diag(q), q+1)})
debug(update_Theta)
update_Theta(y, V, z, mu, Sigma, N, pars = TRUE)
debug(update_Theta)
update_Theta(y, V, z, mu, Sigma, N, pars = TRUE)
mean_Theta
array(unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]})))
unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]}))
class(unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]})))
array(as.numeric(unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]})), dim = c(q,q,N)))
array(as.numeric(unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]}))), dim = c(q,q,N))
a <- unlist(lapply(1:N, function(i) {G[[i]] %*% V[,,i]}))
class(a)
array(a, dim=c(q,q,N))
array(as.numeric(a), dim=c(q,q,N))
b <- lapply(1:N, function(i) {G[[i]] %*% V[,,i]})
array(as.numeric(b),dim=c(q,q,N))
array(unlist(as.numeric(b)),dim=c(q,q,N))
array(unlist(b),dim=c(q,q,N))
library(mbc)
test_package('mbc')
